name: Neovim Plugin CI/CD

on:
  workflow_call:
    secrets:
      RELEASE_TOKEN:
        description: "GitHub PAT for creating the release PRs so that they trigger GitHub Actions"
        required: false
    inputs:
      plugin_name:
        description: "Name of the neovim plugin"
        required: true
        type: string
      is_production:
        description: "Whether or not to perform production tasks"
        default: false
        required: false
        type: boolean
      docs:
        description: "Whether or not to build and deploy"
        default: true
        required: false
        type: boolean
      spellcheck:
        description: "Whether or not to check spelling"
        default: true
        required: false
        type: boolean
      commit_msg:
        description: "Whether or not to validate conventional commit messages"
        default: true
        required: false
        type: boolean

jobs:
  typos:
    name: Spell Check
    runs-on: ubuntu-latest
    if: ${{ inputs.spellcheck && !inputs.is_production }}
    steps:
      - uses: actions/checkout@v4
      - uses: crate-ci/typos@master
  commit_msg:
    name: Conventional Commit Messages
    runs-on: ubuntu-latest
    if: ${{ inputs.commit_msg && !inputs.is_production }}
    steps:
      - uses: actions/checkout@v4
      - uses: webiny/action-conventional-commits@v1.3.0
  style:
    name: Stylua Formatting
    runs-on: ubuntu-latest
    if: ${{ inputs.plugin_name != '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: JohnnyMorganz/stylua-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: latest
          args: --check lua
  lint:
    name: Selene Linting
    runs-on: ubuntu-latest
    if: ${{ inputs.plugin_name != '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: NTBBloodbath/selene-action@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --display-style=quiet lua
  vimdoc:
    name: Generate Vimdoc
    runs-on: ubuntu-latest
    needs:
      - style
      - lint
    if: ${{ inputs.plugin_name != '' && inputs.docs }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_TOKEN != null && secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Install Lua Language Server
        uses: jdx/mise-action@v2
        with:
          tool_versions: |
            lua-language-server latest
      - name: Build API docs and prepare Panvimdoc
        env:
          PLUGIN_NAME: ${{ inputs.plugin_name }}
        run: |
          mkdir -p doc
          if [ ! -e "doc/${PLUGIN_NAME}.txt" ]; then
            touch "doc/${PLUGIN_NAME}.txt"
          fi
          lua-language-server --doc . --doc_out_path api --logpath api
          sed -i -n "/^# ${PLUGIN_NAME}\(\..*\)\{0,1\}$/,/^-\+$/p" api/doc.md
          if [ -s "api/doc.md" ]; then
            sed -i '/^-\+$/d ; s/^#/##/g ; s/^@//g' api/doc.md
            echo "# Lua API" > doc/api.md
            echo "" >> doc/api.md
            echo "${PLUGIN_NAME} API documentation" >> doc/api.md
            echo "" >> doc/api.md
            cat api/doc.md >> doc/api.md
            echo "" >> README.md
            cat doc/api.md >> README.md
          fi
          rm -rf api
      - name: panvimdoc
        uses: kdheepak/panvimdoc@main
        with:
          vimdoc: ${{ inputs.plugin_name }}
          version: "Neovim >= 0.9.0"
          demojify: true
          treesitter: true
      - name: Push changes
        if: ${{ inputs.is_production }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: "doc/*"
          commit_message: "chore(build): auto-generate vimdoc"
          commit_user_name: "astronvimbot"
          commit_user_email: "github@astronvim.com"
          commit_author: "AstroNvim Bot <github@astronvim.com>"
  release:
    name: Release Please
    runs-on: ubuntu-latest
    if: ${{ inputs.is_production }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          release-type: simple
      - uses: actions/checkout@v4
      - uses: rickstaa/action-create-tag@v1
        if: ${{ steps.release.outputs.release_created }}
        with:
          tag: stable
          message: "Current stable release: ${{ steps.release.outputs.tag_name }}"
          tag_exists_error: false
          force_push_tag: true
      - uses: rickstaa/action-create-tag@v1
        if: ${{ steps.release.outputs.release_created }}
        with:
          tag: "v${{ steps.release.outputs.major }}"
          message: "Current v${{ steps.release.outputs.major }} release: ${{ steps.release.outputs.tag_name }}"
          tag_exists_error: false
          force_push_tag: true
      - uses: rickstaa/action-create-tag@v1
        if: ${{ steps.release.outputs.release_created }}
        with:
          tag: "v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}"
          message: "Current v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }} release: ${{ steps.release.outputs.tag_name }}"
          tag_exists_error: false
          force_push_tag: true
